"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapInTestContext = wrapInTestContext;
exports.getBackendFromInstance = getBackendFromInstance;
exports.simulateDragDropSequence = simulateDragDropSequence;
exports.simulateHoverSequence = simulateHoverSequence;

var React = _interopRequireWildcard(require("react"));

var _reactDndTestBackend = _interopRequireWildcard(require("react-dnd-test-backend"));

var _reactDnd = require("react-dnd");

var _testUtils = require("react-dom/test-utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Wrap a DnD component or test case in a DragDropContext
 *
 * @param DecoratedComponent The component to decorate
 */
function wrapInTestContext(DecoratedComponent) {
  var result = function result(props) {
    return React.createElement(_reactDnd.DndProvider, {
      backend: _reactDndTestBackend.default
    }, React.createElement(DecoratedComponent, Object.assign({}, props)));
  };

  result.displayName = 'TestContextWrapper';
  return result;
}
/**
 * Extracts a Backend instance from a TestContext component, such as
 * one emitted from `wrapinTestContext`
 *
 * @param instance The instance to extract the backend fram
 * @deprecated - This is no longer useful since ContextComponent was removed. This will be removed in a major version cut.
 */


function getBackendFromInstance(instance) {
  return (0, _reactDndTestBackend.getInstance)();
}

function simulateDragDropSequence(source, target, backend) {
  (0, _testUtils.act)(function () {
    backend.simulateBeginDrag([source.getHandlerId()]);
    backend.simulateHover([target.getHandlerId()]);
    backend.simulateDrop();
    backend.simulateEndDrag();
  });
}

function simulateHoverSequence(source, target, backend) {
  (0, _testUtils.act)(function () {
    backend.simulateBeginDrag([source.getHandlerId()]);
    backend.simulateHover([target.getHandlerId()]);
    backend.simulateEndDrag();
  });
}