"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function noop() {// noop
}

var TestBackendImpl =
/*#__PURE__*/
function () {
  function TestBackendImpl(manager) {
    _classCallCheck(this, TestBackendImpl);

    this.didCallSetup = false;
    this.didCallTeardown = false;
    this.manager = manager;
    this.actions = manager.getActions();
  }

  _createClass(TestBackendImpl, [{
    key: "setup",
    value: function setup() {
      this.didCallSetup = true;
    }
  }, {
    key: "teardown",
    value: function teardown() {
      this.didCallTeardown = true;
    }
  }, {
    key: "connectDragSource",
    value: function connectDragSource() {
      return noop;
    }
  }, {
    key: "connectDragPreview",
    value: function connectDragPreview() {
      return noop;
    }
  }, {
    key: "connectDropTarget",
    value: function connectDropTarget() {
      return noop;
    }
  }, {
    key: "simulateBeginDrag",
    value: function simulateBeginDrag(sourceIds, options) {
      this.actions.beginDrag(sourceIds, options);
    }
  }, {
    key: "simulatePublishDragSource",
    value: function simulatePublishDragSource() {
      this.actions.publishDragSource();
    }
  }, {
    key: "simulateHover",
    value: function simulateHover(targetIds, options) {
      this.actions.hover(targetIds, options);
    }
  }, {
    key: "simulateDrop",
    value: function simulateDrop() {
      this.actions.drop();
    }
  }, {
    key: "simulateEndDrag",
    value: function simulateEndDrag() {
      this.actions.endDrag();
    }
  }]);

  return TestBackendImpl;
}();

exports.default = TestBackendImpl;