"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntegrationTestHelper = void 0;

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Integration test helper
 * @since 0.1.0
 */
class IntegrationTestHelper {
  /**
   * Wait for all the promises in the test to get resolved
   * @return {Promise}
   */
  static flushAllPromises() {
    return new Promise(resolve => setImmediate(resolve));
  }
  /**
   * Create an integration-test-helper
   * @param {ReduxReducers} reducers reducers to apply
   * @param {ReduxMiddlewares} middlewares array of middlewares to apply
   */


  constructor(reducers, middlewares = []) {
    this.dispatchSpy = jest.fn(() => ({}));

    const reducerSpy = (state, action) => this.dispatchSpy(action);

    const emptyStore = (0, _redux.applyMiddleware)(_reduxThunk.default, ...middlewares)(_redux.createStore);
    const combinedReducers = (0, _redux.combineReducers)(_objectSpread({
      reducerSpy
    }, reducers));
    this.store = emptyStore(combinedReducers);
  }
  /**
   * Mount a component with the store
   * @param  {ReactNode} component A react node to mount
   * @return {EnzymeMount}         Mounted component with enzyme and redux store
   */


  mount(component) {
    return (0, _enzyme.mount)(_react.default.createElement(_reactRedux.Provider, {
      store: this.store
    }, component));
  }
  /**
   * Get the current state object
   * @return {Object} Current state
   */


  getState() {
    const state = this.store.getState();
    delete state.reducerSpy;
    return state;
  }
  /**
   * Get a list with all dispach calls
   * @return {Array} Dispach calls
   */


  getDispatchCalls() {
    const isRelevantCall = call => call.filter(({
      type
    }) => type.startsWith('@@redux')).length === 0;

    return this.dispatchSpy.mock.calls.filter(isRelevantCall);
  }
  /**
   * Get the last dispach call
   * @return {Array} dispach call
   */


  getLastDispachCall() {
    return this.getDispatchCalls().slice(-1);
  }
  /**
   * Take a store snapshot
   * @param  {string} description Snapshoot description
   */


  takeStoreSnapshot(description) {
    expect(this.getState()).toMatchSnapshot(description);
  }
  /**
   * Take a snapshot of all the actions
   * @param  {string} description Snapshoot description
   */


  takeActionsSnapshot(description = 'Integration test actions') {
    expect(this.getDispatchCalls()).toMatchSnapshot(description);
  }
  /**
   * Take a snapshot of the last called action
   * @param  {string} description Snapshoot description
   */


  takeLastActionSnapshot(description) {
    expect(this.getLastDispachCall()).toMatchSnapshot(description);
  }
  /**
   * Take a snapshot of the store together with the last action call
   * @param  {string} description Snapshot description
   */


  takeStoreAndLastActionSnapshot(description) {
    const state = this.getState();
    const action = this.getLastDispachCall();
    expect({
      state,
      action
    }).toMatchSnapshot(description);
  }

}

exports.IntegrationTestHelper = IntegrationTestHelper;