'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TO_STRING = exports.HAS_PROP = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.regFormat = regFormat;
exports.prepare = prepare;
exports.trunc = trunc;
exports.selectNum = selectNum;
exports.isNumber = isNumber;
exports.prepareMsg = prepareMsg;
exports.toObjectMsg = toObjectMsg;
exports.memoize = memoize;

var _validators = require('./validators');

var _validators2 = _interopRequireDefault(_validators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HAS_PROP = exports.HAS_PROP = {}.hasOwnProperty;
var TO_STRING = exports.TO_STRING = {}.toString;

function regFormat(func, messageType) {
  return memoize(function (options) {
    options = options || {};
    var msg = options.msg || options.message;

    return prepare(options['if'], options.unless, options.allowBlank, function (value) {
      if (!value.match(func(options))) {
        return _validators2.default.formatMessage(prepareMsg(msg, messageType));
      }
    });
  });
}

function prepare(ifCond, unlessCond, allowBlank, func) {
  return function (value) {
    var allValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
      value = value == null ? '' : '' + value;

      if ((allowBlank != null ? allowBlank : _validators2.default.defaultOptions.allowBlank) && !value.trim()) {
        return;
      }
    }
    if ((typeof ifCond !== 'function' || ifCond(allValues, value)) && (typeof unlessCond !== 'function' || !unlessCond(allValues, value))) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return func.apply(undefined, [value, allValues].concat(args));
    }
  };
}

function trunc(num) {
  /* istanbul ignore next */
  return Math.trunc ? Math.trunc(num) : num < 0 ? Math.ceil(num) : Math.floor(num);
}

function selectNum(var1, var2) {
  return isNumber(var1) ? +var1 : arguments.length > 1 && isNumber(var2) ? +var2 : null;
}

function isNumber(num) {
  // eslint-disable-next-line
  return !isNaN(num) && (0 != num || '' !== ('' + num).trim());
}

function prepareMsg(msg, type, values) {
  if (msg == null) {
    return defaultMessage(type, values);
  }
  if (HAS_PROP.call(msg, 'props') && isReactElement(msg)) {
    msg = msg.props;
  }
  if (msg[type] != null) {
    msg = msg[type];
  }
  if (isObject(msg)) {
    if (HAS_PROP.call(msg, 'id') || HAS_PROP.call(msg, 'defaultMessage')) {
      return Object.assign({}, msg, { values: values });
    }
    return defaultMessage(type, values);
  }
  return { id: msg, defaultMessage: msg, values: values };
}

function toObjectMsg(msg) {
  if (msg == null) return null;
  return isObject(msg) ? msg : { id: msg, defaultMessage: msg };
}

function memoize(func) {
  if (!func.cache) {
    func.cache = {};
  }
  return function (options) {
    var key = stringify(options);
    return HAS_PROP.call(func.cache, key) ? func.cache[key] : func.cache[key] = func(options);
  };
}

// private
function defaultMessage(type, values) {
  var msg = _validators2.default.messages[type];
  return typeof msg === 'string' ? { defaultMessage: msg, values: values } : Object.assign({}, msg, { values: values });
}

function stringify(options) {
  var arr = [];
  var value = void 0;
  for (var k in options) {
    if (HAS_PROP.call(options, k)) {
      value = options[k];
      arr.push(k, isReactElement(value) ? stringify(value.props) : isObject(value) ? stringify(value) : value.toString());
    }
  }
  return JSON.stringify(arr);
}

function isReactElement(object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && '$$typeof' in object;
}

function isObject(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && TO_STRING.call(obj) === '[object Object]' && obj !== null;
}