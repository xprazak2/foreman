'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _helper = require('./helper');

var _helper2 = _interopRequireDefault(_helper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ERROR_FILE = 'form.errors.file';
var ERROR_ACCEPT = 'form.errors.fileAccept';
var ERROR_TOO_BIG = 'form.errors.fileTooBig';
var ERROR_TOO_FEW = 'form.errors.fileTooFew';
var ERROR_TOO_MANY = 'form.errors.fileTooMany';
var ERROR_TOO_SMALL = 'form.errors.fileTooSmall';

var SIZE_UNITS = {
  B: 1,
  KB: 1024,
  MB: 1048576,
  GB: 1073741824,
  TB: 1099511627776,
  PB: 1125899906842624,
  EB: 1152921504606847000
};

function test(value, params) {
  return (0, _helper2.default)((0, _index.file)(params)(value));
}

describe('Validator: file', function () {
  it('should be invalid when `value` is not a valid file', function () {
    _assert2.default.equal(ERROR_FILE, test(''));
    _assert2.default.equal(ERROR_FILE, test({}));
    _assert2.default.equal(ERROR_FILE, test([]));
  });
  it('should be invalid when `value` is a File with a bad type', function () {
    _assert2.default.equal(ERROR_ACCEPT, test(new File({ type: 'audio/mp3', name: 'foo.bar' }), { accept: 'mp3,bar' }));
    _assert2.default.equal(ERROR_ACCEPT, test(new File({ type: 'audio/mp3', name: '.htaccess' }), { accept: '.htaccess' }));
    _assert2.default.equal(ERROR_ACCEPT, test(new FileList([{ type: 'video/mp4', name: 'foo.bar' }]), { accept: '.mp4' }));
    _assert2.default.equal(ERROR_ACCEPT, test(new FileList([{ type: 'video/mp4', name: 'foo.jpeg' }]), { accept: '.jp*g' }));
    _assert2.default.equal(ERROR_ACCEPT, test(new FileList([{ type: 'jpeg', name: 'foo.bar' }, { type: 'imag/png', name: 'foo.zip' }]), {
      accept: 'audio/*, .foo'
    }));
    _assert2.default.equal(ERROR_ACCEPT, test(new FileList([{ type: 'jpeg', name: 'foo.bar' }, { type: 'imag/png', name: 'foo.zip' }]), {
      accept: 'audio/*, .zip'
    }));
    _assert2.default.equal(ERROR_ACCEPT, test(new FileList([{ type: 'application/zip', name: 'foo.bar' }]), {
      accept: '.application,foo.bar,.zip,application/gzip'
    }));
  });
  it("should be invalid when `value` doesn't contain the right amount of files", function () {
    _assert2.default.equal(ERROR_TOO_FEW, test(new File(), { minFiles: 2 }));
    _assert2.default.equal(ERROR_TOO_FEW, test(new File({ name: 'foo' }), { minFiles: 2 }));
    _assert2.default.equal(ERROR_TOO_FEW, test(new FileList({ length: 0 })));
    _assert2.default.equal(ERROR_TOO_FEW, test(new FileList({ length: 0 }), { minFiles: 1 }));
    _assert2.default.equal(ERROR_TOO_FEW, test(new FileList({ length: 1 }), { minFiles: 2 }));
    _assert2.default.equal(ERROR_TOO_FEW, test(new FileList([{}]), { minFiles: 2 }));

    _assert2.default.equal(ERROR_TOO_MANY, test(new File(), { maxFiles: 0 }));
    _assert2.default.equal(ERROR_TOO_MANY, test(new FileList([{ name: 'foo' }, {}]), { maxFiles: 1 }));
  });
  it('should be invalid when `value` is a File with a bad size', function () {
    _assert2.default.ok(!test(new File({ size: 1024 }), { minSize: 512 }));

    Object.keys(SIZE_UNITS).forEach(function (unit) {
      var size = SIZE_UNITS[unit];

      var size1 = size - (size > 1125899906842624 ? 1000 : 1);
      _assert2.default.equal(ERROR_TOO_SMALL, test(new File({ size: size1 }), { minSize: size }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: size }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: '1' + unit }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: '1 ' + unit }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: '1. ' + unit }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: '1.0001 ' + unit }));
      _assert2.default.equal(ERROR_TOO_SMALL, test(new FileList([{ size: size1 }]), { minSize: '1.0001' + unit }));

      var size2 = size + (size > 1125899906842624 ? 1000 : 1);
      _assert2.default.equal(ERROR_TOO_BIG, test(new File({ size: size2 }), { maxSize: size }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: size }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: '1' + unit }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: '1 ' + unit }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: '1. ' + unit }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: '0.9999 ' + unit }));
      _assert2.default.equal(ERROR_TOO_BIG, test(new FileList([{ size: size2 }]), { maxSize: '0.9999' + unit }));
    });
  });
  it('should be valid when `value` is a valid FileList/File', function () {
    _assert2.default.ok(!test(new FileList([new File()])));
    _assert2.default.ok(!test(new FileList([{}])));
    _assert2.default.ok(!test([new File()]));
    _assert2.default.ok(!test(new File()));
  });
  it('should be valid when `value` is a File with a correct type', function () {
    _assert2.default.ok(!test(new File({ type: 'audio/mp3', name: 'foo.bar' }), { accept: '.bar' }));
    _assert2.default.ok(!test(new File({ type: 'audio/mp3', name: 'foo.bar' }), { accept: '.zip,    .bar ' }));
    _assert2.default.ok(!test(new File({ type: 'audio/mp3', name: 'foo.bar' }), { accept: 'audio/mp3' }));
    _assert2.default.ok(!test(new File({ type: 'audio/mp3', name: 'foo.bar' }), { accept: '.zip,audio/mp3' }));
    _assert2.default.ok(!test(new FileList([{ type: 'video/mp4', name: 'foo.bar' }]), { accept: 'video/*' }));
    _assert2.default.ok(!test(new FileList([{ type: 'application/zip', name: 'foo.bar' }]), { accept: 'application*' }));
    _assert2.default.ok(!test(new FileList([{ type: 'application/zip', name: 'foo.bar' }]), { accept: 'application/*' }));
    _assert2.default.ok(!test(new FileList([{ type: 'application/pdf', name: 'foo.bar' }]), { accept: '*pdf' }));
    _assert2.default.ok(!test(new FileList([{ type: 'application/x-pdf', name: 'foo.bar' }]), { accept: '*pdf' }));
    _assert2.default.ok(!test(new FileList([{ type: 'abc', name: 'foo.jpg' }, { type: 'abc', name: 'foo.png' }]), {
      accept: '.gif, .jpg,.png'
    }));
  });
  it('should be valid when `value` contain the right amount of files', function () {
    _assert2.default.ok(!test(new File(), { minFiles: 1 }));
    _assert2.default.ok(!test(new File(), { maxFiles: 1 }));
    _assert2.default.ok(!test(new FileList(), { minFiles: 0 }));
    _assert2.default.ok(!test(new FileList({ length: 0 }), { minFiles: 0 }));
    _assert2.default.ok(!test(new FileList({ length: 2 }), { minFiles: 2 }));
    _assert2.default.ok(!test(new FileList({ length: 3 }), { minFiles: 2 }));
    _assert2.default.ok(!test(new FileList([{}, {}]), { minFiles: 2 }));
    _assert2.default.ok(!test(new FileList([{}, {}, {}]), { minFiles: 2 }));
    _assert2.default.ok(!test(new FileList({ length: 2 }), { maxFiles: 2 }));
    _assert2.default.ok(!test(new FileList({ length: 2 }), { maxFiles: 3 }));
    _assert2.default.ok(!test(new FileList([{}, {}]), { maxFiles: 2 }));
    _assert2.default.ok(!test(new FileList([{}, {}]), { maxFiles: 3 }));
    _assert2.default.ok(!test(new FileList([{}, {}, {}]), { maxFiles: -1 }));
  });
  it('should be valid when `value` is a File with the correct size', function () {
    _assert2.default.ok(!test(new File({ size: 1024 }), { minSize: 512 }));

    Object.keys(SIZE_UNITS).forEach(function (unit) {
      var size = SIZE_UNITS[unit];

      _assert2.default.ok(!test(new File({ size: size }), { minSize: size }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: size }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: size - 1 }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: '1' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: '1 ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: '1. ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: '0.99 ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: '0.99' + unit }));

      _assert2.default.ok(!test(new File({ size: size }), { maxSize: size }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: size }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: size + 1 }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: '1' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: '1 ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: '1. ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: '1.01 ' + unit }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { maxSize: '1.01' + unit }));

      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: size, maxSize: size }));
      _assert2.default.ok(!test(new FileList([{ size: size }]), { minSize: size - 1, maxSize: size + 1 }));
    });
  });
  it('should use formatSize', function () {
    var formatMessage = _index2.default.formatMessage;
    var defaultValue = _index2.default.formatSize;
    var unitMap = {
      B: 'octets',
      KB: 'Ko'
    };

    _index2.default.formatMessage = ValidatorsFormatMessage;
    _index2.default.formatSize = function (size, unit) {
      return size + ' ' + unitMap[unit];
    };

    _assert2.default.equal('2 octets', (0, _index.file)({ msg: '{size}', minSize: '2B' })(new File({ size: 1 })));
    _assert2.default.equal('1 Ko', (0, _index.file)({ msg: '{size}', minSize: '1KB' })(new File({ size: 1 })));
    _assert2.default.equal('1024 octets', (0, _index.file)({ msg: '{size}', minSize: 1024 })(new File({ size: 1 })));

    _index2.default.formatSize = defaultValue;
    _index2.default.formatMessage = formatMessage;
  });
  it('should use formatMessage', function () {
    var defaultValue = _index2.default.formatMessage;

    _index2.default.formatMessage = function (msg) {
      return Object.assign({}, msg, { id: msg.id + '2' });
    };
    _assert2.default.equal(ERROR_FILE + '2', test({}));
    _assert2.default.equal(ERROR_ACCEPT + '2', test(new FileList([{ type: 'video/mp4', name: 'foo' }]), { accept: '.zip' }));
    _assert2.default.equal(ERROR_TOO_BIG + '2', test(new FileList([{ size: 2 }]), { maxSize: 1 }));
    _assert2.default.equal(ERROR_TOO_FEW + '2', test(new FileList([{}]), { minFiles: 2 }));
    _assert2.default.equal(ERROR_TOO_MANY + '2', test(new FileList([{}, {}]), { maxFiles: 1 }));
    _assert2.default.equal(ERROR_TOO_SMALL + '2', test(new FileList([{ size: 1 }]), { minSize: 2 }));

    _index2.default.formatMessage = defaultValue;
  });
});