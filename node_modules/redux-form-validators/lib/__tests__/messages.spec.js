'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _helper = require('./helper');

var _helper2 = _interopRequireDefault(_helper);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
function test(key, msg, func, value) {
  var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  params[key] = msg;
  return (0, _helper2.default)(func(params)(value));
}

describe('Validator option: message', function () {
  it('should return a custom message', function () {
    var blank = '';['msg', 'message'].forEach(function (key) {
      _assert2.default.equal('foobar', test(key, 'foobar', _index.absence, 'foo'));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.acceptance));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.confirmation, 'foo', { field: 'bar' }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.email, blank));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.date, blank, { format: 'mm/dd/yyyy' }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.exclusion, blank, { in: [blank] }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.file));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.format, blank, { with: /^foo$/ }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.inclusion, blank, { in: [] }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.length, blank, { is: 300 }));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.numericality, blank));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.presence, blank));
      _assert2.default.equal('foobar', test(key, 'foobar', _index.url, blank));
      _assert2.default.equal('foobar', test(key, { id: 'foobar', defaultMessage: 'foo' }, _index.presence, blank));
    });
  });

  it('should accept different message formats', function () {
    var blank = '';['msg', 'message'].forEach(function (key) {
      // React Intl element
      _assert2.default.equal('foobar', test(key, _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'foobar' }), _index.absence, 'foo'));

      // Other formats
      _assert2.default.equal('foobar', test(key, { absence: 'foobar' }, _index.absence, 'foo'));
      _assert2.default.equal('foobar', test(key, { absence: { id: 'foobar' } }, _index.absence, 'foo'));
      _assert2.default.equal('foobar', test(key, { wrongLength: { id: 'foobar' }, tooShort: { id: 'min' } }, _index.length, blank, { is: 300 }));
      _assert2.default.equal('foobar', test(key, { wrongLength: { id: 'is' }, tooShort: { id: 'foobar' } }, _index.length, blank, { min: 1 }));
      _assert2.default.equal('foobar', test(key, { wrongLength: 'foobar', tooShort: 'min' }, _index.length, blank, { is: 300 }));
      _assert2.default.equal('foobar', test(key, { wrongLength: 'is', tooShort: 'foobar' }, _index.length, blank, { min: 1 }));
    });
  });

  it('should fallback to default message', function () {
    var blank = '';['msg', 'message'].forEach(function (key) {
      _assert2.default.equal('form.errors.tooShort', test(key, { wrongLength: { id: 'is' } }, _index.length, blank, { min: 1 }));
      _assert2.default.equal('form.errors.tooShort', test(key, { wrongLength: { id: 'is' } }, _index.length, blank, { is: 0, min: 1 }));
    });
  });

  it('should override default messages', function () {
    var formatMessage = _index2.default.formatMessage;
    _index2.default.formatMessage = global.ValidatorsFormatMessage;

    var defaultMessages = _index2.default.messages;
    _assert2.default.equal(defaultMessages.presence.defaultMessage, (0, _index.presence)()(''));

    _index2.default.messages.presence = {
      id: 'form.errors.presence',
      defaultMessage: 'is mandatory'
    };
    _assert2.default.equal('is mandatory', (0, _index.presence)()(''));
    _index2.default.messages.tooShort = 'is too short: {count} chars expected';
    _assert2.default.equal('is too short: 4 chars expected', (0, _index.length)({ min: 4 })(''));

    Object.assign(_index2.default.messages, {
      presence: {
        id: 'form.errors.presence',
        defaultMessage: 'is missing'
      }
    });
    _assert2.default.equal('is missing', (0, _index.presence)()(''));

    _index2.default.messages = defaultMessages;
    _index2.default.formatMessage = formatMessage;
  });
});