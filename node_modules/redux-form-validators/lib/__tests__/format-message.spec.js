'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _validators = require('../validators');

var _validators2 = _interopRequireDefault(_validators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var formatMessage = global.ValidatorsFormatMessage;

describe('formatMessage', function () {
  it('should return the default value or id', function () {
    _assert2.default.equal('foo', formatMessage({ defaultMessage: 'foo', id: 'bar' }));
    _assert2.default.equal('bar', formatMessage({ id: 'bar' }));
  });
  it('should handle FormattedMessage obj', function () {
    _assert2.default.equal('foo', formatMessage({ props: { defaultMessage: 'foo', id: 'bar' } }));
  });
  it('should replace the vars', function () {
    _assert2.default.equal('foo 1 2', formatMessage({ defaultMessage: 'foo {bar} {foobar}', values: { bar: 1, foobar: 2 } }));
    _assert2.default.equal('foo 1', formatMessage({ defaultMessage: 'foo {count, number}', values: { count: 1 } }));
    _assert2.default.equal('foo 1', formatMessage({ defaultMessage: 'foo {count}', values: { count: 1 } }));
  });
  it('should pluralize', function () {
    var msg = '{count, number} {count, plural, one {char} other {chars}}';
    _assert2.default.equal('0 chars', formatMessage({ defaultMessage: msg, values: { count: 0 } }));
    _assert2.default.equal('1 char', formatMessage({ defaultMessage: msg, values: { count: 1 } }));
    _assert2.default.equal('9 chars', formatMessage({ defaultMessage: msg, values: { count: 9 } }));
    _assert2.default.equal('1 char1 char', formatMessage({ defaultMessage: msg + msg, values: { count: 1 } }));

    msg = '{count, number} {count, plural, one {} other {chars}}';
    _assert2.default.equal('1 ', formatMessage({ defaultMessage: msg, values: { count: 1 } }));

    msg = '{count, number} {count, plural, one {one} other {{size, number} chars}}';
    _assert2.default.equal('1 one', formatMessage({ defaultMessage: msg, values: { count: 1, size: 28 } }));
    _assert2.default.equal('2 28 chars', formatMessage({ defaultMessage: msg, values: { count: 2, size: 28 } }));
  });
  it('should pluralize with given pluralRules', function () {
    var defaultPluralRules = _validators2.default.pluralRules;

    _validators2.default.pluralRules = {
      1: 'one',
      5: 'one',
      7: 'one',
      8: 'one',
      9: 'one',
      10: 'one',
      2: 'two',
      3: 'two',
      4: 'few',
      6: 'many'
    };
    var msg = '{count, plural, one {one} two {two_three} few {four} many {six} other {other}}';

    _assert2.default.equal('other', formatMessage({ defaultMessage: msg, values: { count: 0 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 1 } }));
    _assert2.default.equal('two_three', formatMessage({ defaultMessage: msg, values: { count: 2 } }));
    _assert2.default.equal('two_three', formatMessage({ defaultMessage: msg, values: { count: 3 } }));
    _assert2.default.equal('four', formatMessage({ defaultMessage: msg, values: { count: 4 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 5 } }));
    _assert2.default.equal('six', formatMessage({ defaultMessage: msg, values: { count: 6 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 7 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 8 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 9 } }));
    _assert2.default.equal('one', formatMessage({ defaultMessage: msg, values: { count: 10 } }));

    _validators2.default.pluralRules = defaultPluralRules;
  });
});