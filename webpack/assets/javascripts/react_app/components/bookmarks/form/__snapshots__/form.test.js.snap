// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bookmark form should render the entire form 1`] = `
<BookmarkForm
  controller="hosts"
  initialValues={
    Object {
      "name": "",
      "publik": true,
      "query": "",
    }
  }
  onCancel={[MockFunction]}
  submitForm={[MockFunction]}
  url="/api/bookmarks"
>
  <ForemanForm
    error={null}
    initialValues={
      Object {
        "name": "",
        "publik": true,
        "query": "",
      }
    }
    onCancel={[MockFunction]}
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Array [],
          "refs": Array [],
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "query",
          "name",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Array [],
          "refs": Array [],
        },
        "fields": Object {
          "name": StringSchema {
            "_blacklist": RefSet {
              "list": Array [],
              "refs": Array [],
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Array [],
              "refs": Array [],
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "query": StringSchema {
            "_blacklist": RefSet {
              "list": Array [],
              "refs": Array [],
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Array [],
              "refs": Array [],
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Formik
      enableReinitialize={false}
      initialValues={
        Object {
          "name": "",
          "publik": true,
          "query": "",
        }
      }
      isInitialValid={[Function]}
      onSubmit={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "query",
            "name",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "fields": Object {
            "name": StringSchema {
              "_blacklist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "max": true,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "query": StringSchema {
              "_blacklist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "max": true,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Array [],
                "refs": Array [],
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    >
      <Form
        className="form-horizontal well"
        disabled={true}
        error={null}
        errorTitle="Warning! "
        onCancel={[MockFunction]}
        onSubmit={[Function]}
        submitting={false}
        touched={false}
      >
        <form
          className="form-horizontal well"
          onSubmit={[Function]}
        >
          <TextField
            className=""
            disabled={true}
            formProps={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "values": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
              }
            }
            key="0"
            label="Name"
            name="name"
            required="true"
            type="text"
          >
            <FormikConnect(FieldInner)
              name="name"
              render={[Function]}
            >
              <FieldInner
                formik={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validate": undefined,
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "validationSchema": ObjectSchema {
                      "_blacklist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [],
                      "_exclusive": Object {},
                      "_mutate": undefined,
                      "_nodes": Array [
                        "query",
                        "name",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "fields": Object {
                        "name": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "query": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                    "values": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                  }
                }
                name="name"
                render={[Function]}
              >
                <TextFieldInner
                  className=""
                  input={
                    Object {
                      "name": "name",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "value": "",
                    }
                  }
                  label="Name"
                  meta={
                    Object {
                      "error": undefined,
                      "touched": undefined,
                    }
                  }
                  name="name"
                  required="true"
                  type="text"
                >
                  <CommonForm
                    className=""
                    inputClassName="col-md-4"
                    label="Name"
                    required="true"
                    tooltipHelp={null}
                    touched={false}
                  >
                    <div
                      className="form-group  "
                    >
                      <label
                        className="col-md-2 control-label"
                      >
                        Name
                         *
                      </label>
                      <div
                        className="col-md-4"
                      >
                        <input
                          className="form-control"
                          name="name"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="text"
                          value=""
                        />
                      </div>
                    </div>
                  </CommonForm>
                </TextFieldInner>
              </FieldInner>
            </FormikConnect(FieldInner)>
          </TextField>
          <TextField
            className=""
            disabled={true}
            formProps={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "values": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
              }
            }
            inputClassName="col-md-8"
            key="1"
            label="Query"
            name="query"
            required="true"
            type="textarea"
          >
            <FormikConnect(FieldInner)
              name="query"
              render={[Function]}
            >
              <FieldInner
                formik={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validate": undefined,
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "validationSchema": ObjectSchema {
                      "_blacklist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [],
                      "_exclusive": Object {},
                      "_mutate": undefined,
                      "_nodes": Array [
                        "query",
                        "name",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "fields": Object {
                        "name": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "query": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                    "values": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                  }
                }
                name="query"
                render={[Function]}
              >
                <TextFieldInner
                  className=""
                  input={
                    Object {
                      "name": "query",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "value": "",
                    }
                  }
                  inputClassName="col-md-8"
                  label="Query"
                  meta={
                    Object {
                      "error": undefined,
                      "touched": undefined,
                    }
                  }
                  name="query"
                  required="true"
                  type="textarea"
                >
                  <CommonForm
                    className=""
                    inputClassName="col-md-8"
                    label="Query"
                    required="true"
                    tooltipHelp={null}
                    touched={false}
                  >
                    <div
                      className="form-group  "
                    >
                      <label
                        className="col-md-2 control-label"
                      >
                        Query
                         *
                      </label>
                      <div
                        className="col-md-8"
                      >
                        <textarea
                          className="form-control"
                          name="query"
                          onBlur={[Function]}
                          onChange={[Function]}
                          value=""
                        />
                      </div>
                    </div>
                  </CommonForm>
                </TextFieldInner>
              </FieldInner>
            </FormikConnect(FieldInner)>
          </TextField>
          <TextField
            className=""
            disabled={true}
            formProps={
              Object {
                "dirty": false,
                "errors": Object {},
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialValues": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
                "isSubmitting": false,
                "isValid": false,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setError": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "values": Object {
                  "name": "",
                  "publik": true,
                  "query": "",
                },
              }
            }
            key="2"
            label="Public"
            name="publik"
            required={false}
            type="checkbox"
          >
            <FormikConnect(FieldInner)
              name="publik"
              render={[Function]}
            >
              <FieldInner
                formik={
                  Object {
                    "dirty": false,
                    "errors": Object {},
                    "handleBlur": [Function],
                    "handleChange": [Function],
                    "handleReset": [Function],
                    "handleSubmit": [Function],
                    "initialValues": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "registerField": [Function],
                    "resetForm": [Function],
                    "setError": [Function],
                    "setErrors": [Function],
                    "setFieldError": [Function],
                    "setFieldTouched": [Function],
                    "setFieldValue": [Function],
                    "setFormikState": [Function],
                    "setStatus": [Function],
                    "setSubmitting": [Function],
                    "setTouched": [Function],
                    "setValues": [Function],
                    "status": undefined,
                    "submitCount": 0,
                    "submitForm": [Function],
                    "touched": Object {},
                    "unregisterField": [Function],
                    "validate": undefined,
                    "validateField": [Function],
                    "validateForm": [Function],
                    "validateOnBlur": true,
                    "validateOnChange": true,
                    "validationSchema": ObjectSchema {
                      "_blacklist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "_conditions": Array [],
                      "_defaultDefault": [Function],
                      "_deps": Array [],
                      "_excludedEdges": Array [],
                      "_exclusive": Object {},
                      "_mutate": undefined,
                      "_nodes": Array [
                        "query",
                        "name",
                      ],
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "object",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Array [],
                        "refs": Array [],
                      },
                      "fields": Object {
                        "name": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                        "query": StringSchema {
                          "_blacklist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "_conditions": Array [],
                          "_deps": Array [],
                          "_exclusive": Object {
                            "max": true,
                            "required": true,
                          },
                          "_mutate": undefined,
                          "_options": Object {
                            "abortEarly": true,
                            "recursive": true,
                          },
                          "_type": "string",
                          "_typeError": [Function],
                          "_whitelist": RefSet {
                            "list": Array [],
                            "refs": Array [],
                          },
                          "tests": Array [
                            [Function],
                            [Function],
                          ],
                          "transforms": Array [
                            [Function],
                          ],
                        },
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                    "values": Object {
                      "name": "",
                      "publik": true,
                      "query": "",
                    },
                  }
                }
                name="publik"
                render={[Function]}
              >
                <TextFieldInner
                  className=""
                  input={
                    Object {
                      "name": "publik",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "value": true,
                    }
                  }
                  label="Public"
                  meta={
                    Object {
                      "error": undefined,
                      "touched": undefined,
                    }
                  }
                  name="publik"
                  required={false}
                  type="checkbox"
                >
                  <CommonForm
                    className=""
                    inputClassName="col-md-4"
                    label="Public"
                    required={false}
                    tooltipHelp={null}
                    touched={false}
                  >
                    <div
                      className="form-group  "
                    >
                      <label
                        className="col-md-2 control-label"
                      >
                        Public
                      </label>
                      <div
                        className="col-md-4"
                      >
                        <input
                          checked={true}
                          className=""
                          name="publik"
                          onBlur={[Function]}
                          onChange={[Function]}
                          type="checkbox"
                          value={true}
                        />
                      </div>
                    </div>
                  </CommonForm>
                </TextFieldInner>
              </FieldInner>
            </FormikConnect(FieldInner)>
          </TextField>
          <FormActions
            disabled={true}
            onCancel={[MockFunction]}
            submitting={false}
          >
            <div
              className="clearfix"
            >
              <div
                className="form-actions"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <button
                    className="btn btn-primary"
                    disabled={true}
                    type="submit"
                  >
                     
                    Submit
                  </button>
                </Button>
                 
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[MockFunction]}
                >
                  <button
                    className="btn btn-default"
                    disabled={false}
                    onClick={[MockFunction]}
                    type="button"
                  >
                    Cancel
                  </button>
                </Button>
              </div>
            </div>
          </FormActions>
        </form>
      </Form>
    </Formik>
  </ForemanForm>
</BookmarkForm>
`;
